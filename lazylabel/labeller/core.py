# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_labeller.core.ipynb (unless otherwise specified).

__all__ = ['UniqueList', 'Labeller', 'lfs_order', 'tasks_labels']

# Cell
from fastai2.basics import *
from ..basics import *
from functools import wraps

# Cell
class UniqueList(L):
    def append(self, o):
        if o not in self.items: super().append(o)

# Cell
class Labeller:
    def __init__(self): self.subs = {}

    def __call__(self, tfm, *pre):
        def _inner(f): return self.register_func(tfm, f, *pre)
        return _inner

    def register_func(self, tfm, f, *pre):
        sub = tfm.listen(*pre)(self._add_label(f))
        self.subs[f.__name__] = sub
        return sub

    def register_funcs(self, tfm, fs, *pre):
        for f in L(fs): self.register_func(tfm, f, *pre)

    def _add_label(self, f):
        @wraps(f)
        def _inner(x, *args, **kwargs): x.labels.append(f(x, *args, **kwargs))
        return _inner

# Cell
@patch
def listen_lfs_order(self:Labeller):
    self._lfs_order = L()
    for sub in self.subs.values(): sub.listen_one(self._lfs_order.append)

# Cell
@patch_property
def lfs_order(self:Labeller):
    for sub in self.subs.values(): sub.listen_one(None)
    return self._lfs_order

# Cell
@patch
def remove(self:Labeller, name):
    sub = self.subs[name]
    sub.cancel()
    del sub

# Cell
@patch
def reset(self:Labeller):
    for sub in self.subs.values(): sub.cancel()
    self.subs.clear()

# Cell
@patch
def _find(self:Labeller, dl, lfs_idxs, lbl_idxs, reduction=operator.and_):
    matches,total = [],0
    old_shuffle, dl.shuffle = dl.shuffle, False
    for b in dl:
        xb,yb = split_batch(dl, b)
        masks = [xb[:,i]==x for i,x in zip(lfs_idxs,lbl_idxs)]
        mask = reduce(reduction, masks)
        idxs = np.array(mask2idxs(mask))
        matches.extend(idxs+total)
        total += find_bs(xb)
    dl.shuffle = old_shuffle
    return matches

# Cell
@patch
def find(self:Labeller, dl, vocab, lfs, lbls, reduction=operator.and_):
    vocab = CategoryMap(vocab)
    lfs_idxs = [self.lfs_order.index(lf) for lf in lfs]
    lbl_idxs = [vocab.o2i[lbl] for lbl in lbls]
    return self._find(dl, lfs_idxs, lbl_idxs, reduction)

# Cell
def tasks_labels(labeller, tls, vocab, splits=None, lazy=False):
    labeller.listen_lfs_order()
    tasks = TfmdLists(tls, [AttrGetter('labels'), MultiCategorize(vocab)], splits=splits)
    if not lazy: tasks.cache()
    return tasks