# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['instantiate', 'split_batch', 'AttrProxy', 'add_attr']

# Cell
from fastai2.basics import *
from functools import wraps

# Cell
def instantiate(o):
    "Instantiate `o` if it's a class"
    return o() if isinstance(o,type) else o

# Cell
def split_batch(dl, b):
    i = getattr(dl, 'n_inp', 1 if len(b)==1 else len(b)-1)
    return map(detuplify, (b[:i],b[i:]))

# Cell
_old_tfmdlists_init = TfmdLists.__init__
@patch
def __init__(self:TfmdLists, items, tfms, **kwargs):
    self.cached = False
    _old_tfmdlists_init(self, items, tfms, **kwargs)

# Cell
_old_tfmdlists_new = TfmdLists._new
@patch
def _new(self:TfmdLists, items, **kwargs):
    tls = _old_tfmdlists_new(self, items, )
    tls.cached = self.cached
    return tls

# Cell
@patch
def cache(self:TfmdLists, tfms=None, pbar=True):
    tfms = Pipeline(tfms)
    self.items = [tfms(o) for o in (progress_bar(self) if pbar else self)]
    self.cached = True

# Cell
_old_getitem = TfmdLists.__getitem__
@patch
def __getitem__(self:TfmdLists, idx):
    if self.cached: return super(TfmdLists, self).__getitem__(idx)
    else:      return _old_getitem(self, idx)

# Cell
class AttrProxy(GetAttr):
    def __init__(self, default): self.default = default

# Cell
def _get_proxy(x):
    if x.__class__.__module__ != 'builtins': raise ValueError('Use only with builtins')
    name = 'Proxy' + x.__class__.__name__.capitalize()
    return type(name, (x.__class__,), {})(x)

# Cell
def add_attr(obj, name, value):
    try:
        setattr(obj, name, getattr(obj,name,value))
        return obj
    except AttributeError: return add_attr(_get_proxy(obj), name, value)